name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push가 발생할 경우 동작한다.
# dev에 배포
on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Java 21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      #  Spring Boot 애플리케이션 테스트
      - name: Run Tests with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
        env:
          SPRING_PROFILES_ACTIVE: test

      #  Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar
        env:
          SPRING_PROFILES_ACTIVE: test

      #  Docker 이미지 빌드
      - name: docker image build
        run: docker build -f ./docker/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server-dev .

      #  DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      #  Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server-dev

  # ec2에 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SSH to EC2 and create folder
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p cheftory-proxy-server

      - name: Create .env on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/cheftory-proxy-server
            cat <<EOF > .env
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            AI_RECIPE_SUMMARY_HOST=${{ secrets.AI_RECIPE_SUMMARY_HOST }}
            AI_RECIPE_SUMMARY_PORT=${{ secrets.AI_RECIPE_SUMMARY_PORT }}
            YOUTUBE_API_KEY=${{secrets.YOUTUBE_API_KEY}}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
            JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
            EOF
            

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker/docker-compose.yml"
          target: "~/cheftory-proxy-server"
          strip_components: 0

      - name: List workspace files
        run: ls -R

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd cheftory-proxy-server

            # Docker Hub에 로그인
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 현재 docker-compose.yml 확인
            echo "=== Before modification ==="
            cat docker-compose.yml

            # docker-compose.yml에서 이미지 이름 수정
            sed -i "s|image: cheftory-proxy-server-dev:latest|image: ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server-dev:latest|g" docker-compose.yml

            # 수정된 내용 확인
            echo "=== After modification ==="
            cat docker-compose.yml

            # 기존 컨테이너 정리
            sudo docker-compose stop || true
            sudo docker-compose rm -f || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server-dev:latest || true

            # 새 이미지 pull 및 실행
            sudo docker-compose --env-file .env pull
            sudo docker-compose --env-file .env up -d

            # 컨테이너 상태 확인
            sudo docker-compose ps
