name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 테스트
      - name: Run Tests with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
        env:
          SPRING_PROFILES_ACTIVE: test

      # 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar
        env:
          SPRING_PROFILES_ACTIVE: test

      # Docker 이미지 빌드
      - name: docker image build
        run: docker build -f ./docker/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server:latest .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server:latest

  # 배포 단계
  deploy:
    environment: production
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # EC2 폴더 생성
      - name: SSH to EC2 and create folder
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p "$HOME/cheftory-proxy-server/docker"

      # .env 파일 생성
      - name: Create .env on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat > "$HOME/cheftory-proxy-server/.env" <<'EOF'
            COMPOSE_PROJECT_NAME=cheftory
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            AI_RECIPE_SUMMARY_HOST=${{ secrets.AI_RECIPE_SUMMARY_HOST }}
            AI_RECIPE_SUMMARY_PORT=${{ secrets.AI_RECIPE_SUMMARY_PORT }}
            YOUTUBE_API_KEY=${{secrets.YOUTUBE_API_KEY}}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
            JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
            APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}
            SENTRY_AUTH_TOKEN=${{secrets.SENTRY_AUTH_TOKEN}}
            SENTRY_DSN=${{secrets.SENTRY_DSN}}
            EOF

      # docker-compose.prod.yml 복사
      - name: Copy docker-compose.prod.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker/docker-compose.prod.yml"
          target: "$HOME/cheftory-proxy-server/docker"
          strip_components: 0

      # 파일 검증
      - name: Verify files on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            ls -al "$HOME/cheftory-proxy-server"
            ls -al "$HOME/cheftory-proxy-server/docker"
            test -f "$HOME/cheftory-proxy-server/docker/docker-compose.prod.yml" || { echo "compose 파일 없음"; exit 1; }

      # 배포 실행
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            WORKDIR="$HOME/cheftory-proxy-server/docker"
            cd "$WORKDIR"

            # Docker Hub 로그인
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 이미지명 교체
            if grep -q 'image: cheftory-proxy-server:latest' docker-compose.prod.yml; then
              sed -i "s|image: cheftory-proxy-server:latest|image: ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-proxy-server:latest|g" docker-compose.prod.yml
            fi

            # docker compose 명령어 선택
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            # 컨테이너 중지 및 제거
            sudo $DC -f docker-compose.prod.yml --env-file ../.env down --remove-orphans || true

            # 새 이미지 pull & up
            sudo $DC -f docker-compose.prod.yml --env-file ../.env pull
            sudo $DC -f docker-compose.prod.yml --env-file ../.env up -d

            # 오래된 dangling 이미지 정리
            sudo docker image prune -f || true
